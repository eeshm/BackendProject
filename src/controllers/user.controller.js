import { asyncHandler } from "../utils/asyncHandler.js";
import { ApiError } from "../utils/ApiError.js";
import { ApiResponse } from "../utils/ApiResponse.js";
import { User } from "../models/user.model.js";
import { uploadOnCloudinary } from "../utils/cloudinary.js";
import jwt from "jsonwebtoken";
import mongoose from "mongoose";

const generateAccessAndRefreshTokens = async (userId) => {
  try {
    const user = await User.findById(userId);
    const accessToken = user.generateAccessToken();
    const refreshToken = user.generateRefreshToken(); //these generateRefreshToken() and generateAccessToken() is a methods which is defined by us in user.model.js in userSchema and is accessible using mongodb

    user.refreshToken = refreshToken;
    await user.save({ validateBeforeSave: false }); //save function from mongodb and used validateBeforeSave() to prevent required fields as false like password and email
    //because methods from mongodb like save() trigger all fields before saving

    return { accessToken, refreshToken };
  } catch (error) {
    throw new ApiError(
      500,
      "Something went wrong while generating refresh and access token"
    );
  }
};

const registerUser = asyncHandler(async (req, res) => {
  //using express js we have access to both req,res
  // get user details from frontend
  // validation -- not empty and others
  // check if user already exists : username, email
  // check for images, check for avatar(compulsory)
  // upload them to cloudinary, avatar if successful
  // create user object - create entry in db
  // remove password and refresh token field from response
  // check for user creation
  // return response if user created : false

  const { fullName, username, email, password } = req.body;
  //    console.log("email: ",email);
  //    if(fullName===""){
  //     throw new ApiError(400,"fullname is required ")
  //    }

  //Alltogether
  if (
    [fullName, email, username, password].some((field) => field?.trim() === "")
  ) {
    throw new ApiError(400, "All fields are required");
  }

  const existedUser = await User.findOne({
    // User from our user.models(as it has direct access to mongodb ) and findOne() func from mongodb to match already existing field
    $or: [{ username }, { email }], //operators from mongodb to match the already existing fields
  });
  if (existedUser) {
    throw new ApiError(409, "User with email or username already exist");
  }
  // console.log(req.files);

  const avatarLocalPath = req.files?.avatar[0]?.path;
  //we get .files access from multer and also path from multer

  // const coverImageLocalPath = req.files?.coverImage[0]?.path;
  let coverImageLocalPath; //to check if coverImage path is undefined or not
  if (
    req.files &&
    Array.isArray(req.files.coverImage) &&
    req.files.coverImage.length > 0
  ) {
    coverImageLocalPath = req.files.coverImage[0].path;
  }

  if (!avatarLocalPath) {
    throw new ApiError(400, "Avatar file is required");
  }

  const avatar = await uploadOnCloudinary(avatarLocalPath);
  const coverImage = await uploadOnCloudinary(coverImageLocalPath);

  if (!avatar) {
    throw new ApiError(400, "Avatar file is required");
  }

  const user = await User.create({
    //create from mongoose to pass a data entry
    fullName,
    avatar: avatar.url,  //this .url we get from cloudinary service
    coverImage: coverImage?.url || "",
    email,
    password,
    username: username.toLowerCase(),
  });

  //
  const createdUser = await User.findById(user._id).select(
    "-password -refreshToken"
  ); //_id is automatically generated by mongodb with each data entry and findById is given by mongoose library
  //.select(with this same syntax) also given by mongooose to remove particular fields in entry

  if (!createdUser) {
    throw new ApiError(500, "Something went wrong while registering the user");
  }

  return res
    .status(201)
    .json(new ApiResponse(200, createdUser, "User registered Successfully"));
});

const loginUser = asyncHandler(async (req, res) => {
  // req.body-> data
  // username or email
  // find the user
  // if user exist, then password check
  // if password check, access and refresh token generate
  // send secure cookies
  // send response

  const { email, password, username } = req.body;

  if (!(username || email)) {
    throw new ApiError(400, "username or email is required");
  }

  const user = await User.findOne({
    $or: [{ username }, { email }],
  });

  if (!user) {
    throw new ApiError(404, "User does not exist");
  }

  const isPasswordCorrect = await user.isPasswordCorrect(password); //this isPasswordCorrect is a methods which is defined by us in user.model.js in userSchema and is accessible using mongodb
  if (!isPasswordCorrect) {
    throw new ApiError(404, "Invalid user credentials");
  }

  const { accessToken, refreshToken } = await generateAccessAndRefreshTokens(
    user._id
  );
  //destructing as this methods return both access and refresh token

  const loggedInUser = await User.findById(user._id).select(
    "-password -refreshToken"
  );

  const options = {
    httpOnly: true,
    secure: true,
  }; //to make cookies not editable but only available for view

  return res
    .status(200)
    .cookie("accessToken", accessToken, options)
    .cookie("refreshToken", refreshToken, options)
    .json(
      new ApiResponse(
        200,
        {
          user: loggedInUser,
          accessToken,
          refreshToken,
        },
        "User logged in succesfully "
      )
    );
});

const logoutUser = asyncHandler(async (req, res) => {
  await User.findByIdAndUpdate(
    req.user._id, //we got this access of req.user from middleware from auth.middleware.js and then we passed that middlware in user.router.js and then we got its access.
    {
      $set: {
        refreshToken: undefined,
      },
    }
  );
  const options = {
    //these options are to make cookie only changeable through server
    httpOnly: true,
    secure: true,
  };
  return res
    .status(200)
    .clearCookie("accessToken", options) //clearCookie() from cookie-parser
    .clearCookie("refreshToken", options)
    .json(new ApiResponse(200, {}, "User logged out"));
});

const refreshAccessToken = asyncHandler(async (req, res) => {
  const incomingRefreshToken =
    req.cookies.refreshToken || req.body.refreshToken;
  //req.cookie for browser and req.body for mobile

  if (!incomingRefreshToken) {
    throw new ApiError(401, "unauthorized request");
  }
  try {
    const decodedToken = jwt.verify(
      incomingRefreshToken,
      process.env.REFRESH_TOKEN_SECRET
    );
    const user = await User.findById(decodedToken?._id);

    if (!user) {
      throw new ApiError(401, "Invalid refresh token");
    }

    if (incomingRefreshToken !== user.refreshToken) {
      //user.refreshToken ---> saved refreshToken in user in generateAccessAndRefreshToken() function
      throw new ApiError(401, "Refresh token is expired or used");
    }

    const options = {
      httpOnly: true,
      secure: true,
    };

    const { accessToken, newRefreshToken } =
      await generateAccessAndRefreshTokens(user._id);

    return res
      .status(200)
      .cookie("accessToken", accessToken, options)
      .cookie("refreshToken", newRefreshToken, options)
      .json(
        new ApiResponse(
          200,
          { accessToken, refreshToken: newRefreshToken },
          "Access token refresh"
        )
      );
  } catch (error) {
    throw new ApiError(401, error?.message || "Invalid refresh token");
  }
});

const changeCurrentPassword = asyncHandler(async (req, res) => {
  const { oldPassword, newPassword } = req.body;

  const user = User.findById(req.user?._id); //we can request this req.user because before this we are using auth middlware in which it assings the user to req.user
  const isPasswordCorrect = await user.isPasswordCorrect(oldPassword);

  if (!isPasswordCorrect) {
    throw new ApiError(400, "Invalid old password");
  }

  user.password = newPassword;
  await user.save({ validateBeforeSave: false });

  return res.status(200).json(new ApiResponse(200, {}, "Password"));
});

const getCurrentUser = asyncHandler(async (req, res) => {
  return res
    .status(200)
    .json(new ApiResponse(200, req.user, "Current user fetched successfully")); //as this is used with auth middleware and user is already present in req.user
});

const updateAccountDetails = asyncHandler(async (req, res) => {
  const { fullName, email } = req.body;

  if (!fullName || !email) {
    throw new ApiError(400, "All fields are required");
  }

  const user = User.findByIdAndUpdate(
    req.user?._id,
    {
      $set: {
        fullName: fullName,
        email: email,
      },
    }, //this parameter is used to update the values
    { new: true } //by this paramter updated fields are returned in findByIdAndUpdate() method
  ).select("-password"); //to remove password field in req

  return res
    .status(200)
    .json(new ApiResponse(200, user, "Account details updated successfully"));
});

const updateUserAvatar = asyncHandler(async(req,res)=>{
  const avatarLocalPath = req.file   // we got this req.file from multer middlware which we injected before this function in routes as same we did in registerUser
  if(!avatarLocalPath){
    throw new ApiError(400,"Avatar file is missing")
  }
  const avatar = await uploadOnCloudinary(avatarLocalPath)
  
  if(!avatar.url){  //this .url we get from cloudinary service (it is important to use .url while using cloudinary services to get the url to save to mongodb database )
    throw new ApiError(400,"Error while uploading Avatar")
  }

  const user = await User.findByIdAndUpdate(
    req.user?._id,
    {
     $set:{
      avatar:avatar.url //it is important to use .url because what we get in return is an object but we only want to update url in mongodb as we defined it in our userSchema
     }
    },
    {new:true}
  ).select("-password")

  return res
  .status(200)
  .json(new ApiResponse(200,user,"Updated Avatar"))
})

const updateUserCoverImage = asyncHandler(async(req,res)=>{
  const coverImageLocalPath = req.file   // we got this req.file from multer middlware which we injected before this function in routes as same we did in registerUser
  if(!coverImageLocalPath){
    throw new ApiError(400,"Cover Iamge file is missing")
  }
  const coverImage = await uploadOnCloudinary(coverImageLocalPath)
  
  if(!coverImage.url){  //this .url we get from cloudinary service (it is important to use .url while using cloudinary services to get the url to save to mongodb database )
    throw new ApiError(400,"Error while uploading Cover Image")
  }

  const user = await User.findByIdAndUpdate(
    req.user?._id,
    {
     $set:{
      coverImage:coverImage.url //it is important to use .url because what we get in return is an object but we only want to update url in mongodb as we defined it in our userSchema
     }
    },
    {new:true}
  ).select("-password")

  return res
  .status(200)
  .json(new ApiResponse(200,user,"Cover Image updated"))
})
export {
  registerUser,
  loginUser,
  logoutUser,
  refreshAccessToken,
  changeCurrentPassword,
  getCurrentUser,
  updateAccountDetails,
  updateUserAvatar,
  updateUserCoverImage
};
